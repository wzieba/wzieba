<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Wojtek Zięba on Medium]]></title>
        <description><![CDATA[Stories by Wojtek Zięba on Medium]]></description>
        <link>https://medium.com/@wzieba?source=rss-117db94a0177------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*0VorisoRS9aOsrsfbsgzag.jpeg</url>
            <title>Stories by Wojtek Zięba on Medium</title>
            <link>https://medium.com/@wzieba?source=rss-117db94a0177------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Wed, 05 Aug 2020 13:30:23 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@wzieba" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Github Actions + Fastlane + Firebase App Distribution (or App Center)]]></title>
            <link>https://medium.com/@wzieba/github-actions-fastlane-firebase-app-distribution-or-app-center-4fadbdff63f9?source=rss-117db94a0177------2</link>
            <guid isPermaLink="false">https://medium.com/p/4fadbdff63f9</guid>
            <dc:creator><![CDATA[Wojtek Zięba]]></dc:creator>
            <pubDate>Sun, 02 Aug 2020 10:11:23 GMT</pubDate>
            <atom:updated>2020-08-02T10:19:21.186Z</atom:updated>
            <content:encoded><![CDATA[<h3>Github Actions + Fastlane + Firebase App Distribution</h3><p>If you’re using Github Actions and you want to automate the process of distributing your app to testers/QA team, you might want to use my Github Action for <a href="https://github.com/wzieba/Firebase-Distribution-Github-Action">Firebase App Distribution</a> or <a href="https://github.com/wzieba/AppCenter-Github-Action">App Center</a>. If you’re interested in writing your own action, I can recommend you my blog post: <a href="https://www.tooploox.com/blog/custom-github-action-for-firebase-app-distribution">https://www.tooploox.com/blog/custom-github-action-for-firebase-app-distribution</a></p><p>Using custom Github Actions has its flows though. Two major are:</p><ol><li>Your CI/CD flow is tightly coupled with the Github platform. If you decide to change to any other CI/CD provider, you’ll have to rewrite a significant part of the flow.</li><li>You can’t run your flow locally, which might be crucial for some use cases.</li></ol><h3>Using Fastlane as a middle-man</h3><p>To decouple your CI/CD pipeline, one can use the tool <a href="https://fastlane.tools/">Fastlane</a>. Below you can see how we can merge those all services together.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fNCgV578-jJ72JAPATE5zA.png" /><figcaption>The flow of Github Actions + Fastlane + Firebase App Distribution integration (see how happy QA/Testers are)</figcaption></figure><h4>1. Github Actions</h4><p>Firstly, you have to configure Github Actions workflow file:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a9f88ac9e86026a088b786f05d33390b/href">https://medium.com/media/a9f88ac9e86026a088b786f05d33390b/href</a></iframe><p>Lines 4 to 9 describe workflow_dispatch manual triggers. This means, that this workflow can be run either by <a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">recently added</a> UI widget or by REST call. Docs are available <a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_dispatch">here</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Ogs--t4hJb4IhaiTAza9Ow.png" /><figcaption>This is how you manually run the workflow. Go to Actions &gt; Distribute to firebase &gt; Run workflow</figcaption></figure><p><strong>Important note: </strong>you won’t be able to see/run this workflow until the .yml workflow configuration file will land to your <strong>main branch.</strong></p><h4>Installing firebase-tools</h4><p>To allow fastlane to perform any Firebase-related operations, you have to provide <a href="https://firebase.google.com/docs/cli">Firebase CLI</a> and put this into PATH . Usually, you could run</p><pre>npm install -g </pre><p>but, as you don’t have root access while running Github Actions, you’ll receive Error: EACCES: permission denied, access ‘/usr/local/lib/node_modules&#39; . To not mess with permissions system, we’ll take an easier approach: we’ll use yarn and put its global bin directory to PATH . For details see <a href="https://classic.yarnpkg.com/en/docs/cli/global/">this link</a>, paragraph named “Adding the install location to your PATH”</p><h4>2. Fastlane configuration</h4><p>Assuming you already have basic fastlane setup (go with brew install fastlane &amp;&amp; fastlane init ) you’ll have to add firebase plugin:</p><pre>fastlane add_plugin fastlane-plugin-firebase_app_distribution</pre><p>To use the new plugin, edit Fastfile . Minimal configuration is here:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1bc07e2cc7ed8c67a5f2d7b426f7dd1a/href">https://medium.com/media/1bc07e2cc7ed8c67a5f2d7b426f7dd1a/href</a></iframe><p>In favor of keeping this as a minimal demo, I’m fetching some test .apk from remote and providing its path but instead of line 8 you’ll probably want to execute some scripts to build your .apk/.ipa files .</p><p>Offtopic: I was surprised by the behavior of thepwd command. Did you know that it adds a new line at the end of execution? That’s why we’re removing \n a character from it, before concatenation. Otherwise, we would land with malformed path to the distribution file.</p><h3>Summary</h3><p>That configured Github Actions workflow+ Fastfale will allow you to successfully run Fastlane lane and distribute .apk (or .ipa) to Firebase App Distribution. The sample code is available on <a href="https://github.com/wzieba/FastlaneGithubActionsSample">Github</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4fadbdff63f9" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[String escape sequences while reading String from a file in Kotlin/Java]]></title>
            <link>https://medium.com/@wzieba/string-escape-sequences-while-reading-string-from-a-file-in-kotlin-java-77b4249e5330?source=rss-117db94a0177------2</link>
            <guid isPermaLink="false">https://medium.com/p/77b4249e5330</guid>
            <category><![CDATA[android]]></category>
            <category><![CDATA[string-matching]]></category>
            <category><![CDATA[kotlin]]></category>
            <category><![CDATA[java]]></category>
            <category><![CDATA[string]]></category>
            <dc:creator><![CDATA[Wojtek Zięba]]></dc:creator>
            <pubDate>Sun, 26 Jul 2020 14:18:23 GMT</pubDate>
            <atom:updated>2020-07-26T14:18:23.301Z</atom:updated>
            <content:encoded><![CDATA[<p>When loading string data from a file, you might experience gotcha, which will result in not respected two-literal escape sequences in strings.</p><p>Having file:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/088c4d0bfe2479af703df730ea88a356/href">https://medium.com/media/088c4d0bfe2479af703df730ea88a356/href</a></iframe><p>one could expect that this test will pass:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f05b100498465c7cde5c851ae1509a3e/href">https://medium.com/media/f05b100498465c7cde5c851ae1509a3e/href</a></iframe><p>It doesn’t though, with the following fail message:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/444/1*Co2Mq6faWXcqNI31paUfSQ.png" /></figure><p>What happened? In both cases we’ve got string “foo\nbar”, but as we can see String assigned in code <strong>does</strong> resolve escape sequence (hence foo and bar are in separate lines) but String read from the file <strong>does not</strong> resolve escape sequence<strong> </strong>(hence literal chars: \ and n instead of an empty line).</p><p>The reason for this behavior is in how JVM resolves string literals vs. how reading file content is implemented in Java/Kotlin.</p><h3>1. Resolving String literals</h3><p>Quoting Java language specification</p><blockquote>A <em>string literal</em> consists of zero or more characters enclosed in double quotes. Characters may be represented by <strong>escape sequences</strong> (…)</blockquote><p>This means, that Java has support for escape sequences natively. Before putting String into String Pool it reads specific <em>literal</em> taking into account escape sequences. This is why calling String#getBytes with UTF-8 Charset will result with the following array of bytes:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/296/1*61Me4GUZq2SULdnfjhdJQQ.png" /></figure><p>Total length is 7 and character at index 3 is evaluated as LF (means a new line, see <a href="https://www.ascii-code.com/">ASCII Table</a>)</p><h3>2. Reading String from file</h3><p>When reading line from a file, the array size is 8 and there is no LF character. Instead of it, one can see two new values at indexes 3 and 4, respectively \ and n .</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/290/1*2qS4GDb2kVaAgDMGFjLi-g.png" /></figure><p>The reason for this behavior can be found in <a href="https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html#read()">java.io.InputStream#read method</a>: the InputStream (and therefore file) is read <strong>byte by byte </strong>and put into ByteArray , and then each byte is mapped to Char according to its value is defined Charset (default one: UTF-8).</p><p>This works as expected: in result, we have plain, literal foo\nbar String, but what if we want to read strings from file <strong>with </strong>support of escape sequences?</p><h4>Solution #1: replace placeholders with the escape sequence</h4><p>As a quick fix, we can simply replace every needed “escape-sequence-looking-like” pair (literal \n, or \t etc.) with a direct escape sequence (in below snippet line 4).</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0f89980f0d545e8e14a0ea57825f7cd7/href">https://medium.com/media/0f89980f0d545e8e14a0ea57825f7cd7/href</a></iframe><p>In such a case, \n will work only as a pointer to a specific escape sequence.</p><h4>Solution #2: use Apache Commons if you want to delegate replacing and support all corner cases</h4><p>Solution #1 has its flaws: you have to know every escape sequence and directly find&amp;replace it. It’s not tremendous work: all of them can be found in <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JVM specs</a>. But if you prefer to delegate this responsibility to 3rd party, you can use the StringEscapeUtils#unescapeJava method from <a href="https://commons.apache.org/proper/commons-text/">Appache Commons Text library</a>:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ca35f6e6bd56365c8f69319c5465a96d/href">https://medium.com/media/ca35f6e6bd56365c8f69319c5465a96d/href</a></iframe><p>Under the hood, <a href="https://git-wip-us.apache.org/repos/asf?p=commons-text.git;a=blob;f=src/main/java/org/apache/commons/text/StringEscapeUtils.java;h=5ead630a0d1cbead81ec3e605e4022ece883b250;hb=HEAD#l64">StringEscapeUtil#unescapeJava</a> does some more or less sophisticated operations in order to, in the end, replace “escape-sequence-looking-like” pair with a real escape sequence.</p><h4>Summary</h4><p>As usual, everything works as expected. I’ve decided to write about this gotcha as it took me some time to realize why sometimes <br>“foo\nbar” != “foo\nbar” 😄</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=77b4249e5330" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Count change algorithm.]]></title>
            <link>https://medium.com/@wzieba/count-change-algorithm-df8864f68e76?source=rss-117db94a0177------2</link>
            <guid isPermaLink="false">https://medium.com/p/df8864f68e76</guid>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[scala]]></category>
            <category><![CDATA[coursera]]></category>
            <category><![CDATA[functional-programming]]></category>
            <dc:creator><![CDATA[Wojtek Zięba]]></dc:creator>
            <pubDate>Fri, 27 Jan 2017 01:35:30 GMT</pubDate>
            <atom:updated>2017-01-27T01:35:30.882Z</atom:updated>
            <content:encoded><![CDATA[<p>During my time on university I had some difficulties with understanding functional programming paradigm. Suddenly I’ve found <a href="https://www.coursera.org/learn/progfun1/home/welcome">course on Coursera</a> that is led by <strong>Martin Odersky</strong> — designer of Scala. I find this course very helpful. If you starting learning functional programming — it’s great idea to go there.</p><p>Once I’ve stuck on a first assignment’s exercise — count changing algorithm. I couldn’t find any way to do this, so I started searching the web for some ideas and I have found <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_idx_722">mitpress.mit.edu</a> although the explanation provided there wasn’t 100% understandable for me so I decided to extend it and provide examples with visualization.</p><p><strong>Disclaimer: Out of respect for Coursera for providing free, great course I won’t break their </strong><a href="https://learner.coursera.help/hc/en-us/articles/209818863-Coursera-Honor-Code"><strong>honor code</strong></a><strong> so don’t seek here for copy-paste solution.</strong></p><h3>Count change algorithm</h3><p><em>Write a recursive function that counts how many different ways you can make change for an amount, given a list of coin denominations.</em> ~ Coursera.org</p><p>The most important sentence to understand this algorithm is “(…)the ways to make change can be divided into two groups: those that do not use any of the first kind of coin, and those that do” (from <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_idx_722">mitpress.mit.edu</a>).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*kFICiejNFWp2pq8tr36pRA.png" /></figure><p>Obviously, the answer of our algorithm should be sum of them two. How to manage this then?</p><p>I will past the implementation of algorithm taken from mitpress.mit.edu with difference, that they’ve written it in Lisp and I formatted it to Scala, which makes it easier to read.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3cfddddf1b39176e0df4300fc8c790e6/href">https://medium.com/media/3cfddddf1b39176e0df4300fc8c790e6/href</a></iframe><p>First method <strong>firstDenomination</strong> is workaround because of Lisp language, don’t take care of it, in final assignment you have to use list of coins anyway.</p><p>The core of the problem lies in <strong>cc</strong> function (cc is shortcut of count-change). Take a close look at this two lines:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/54f796bcfb75a277a7c088a7985c1ffd/href">https://medium.com/media/54f796bcfb75a277a7c088a7985c1ffd/href</a></iframe><p>If <em>amount</em> is <strong>0</strong> then we just achieved our way — the remaining value of our initial <em>amount</em> is <strong>0</strong> so we don’t have to do anything. We can count it as 1 more way to change money. Although if our <em>amount</em> is smaller than <strong>0</strong> (we subtracted amount with bigger coin than the value of amount) or <em>kindOfCoins</em> is <strong>0</strong> (there’s no more coins we can try to use to change money) then previous calculations were wrong and we can’t change our money this way.</p><p>Then we face the line</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/dfeb41a20bfcab93cd9cb60672c020b4/href">https://medium.com/media/dfeb41a20bfcab93cd9cb60672c020b4/href</a></iframe><p>Here we come to those two groups: <br>1. First addend, <em>cc(amount, kindOfCoins)</em>, gives us all ways that do not use any of first kind of coin (because we just deleted it) <br>2. Second addend, <em>cc(amount — firstDenomination(kindOfCoins), kindOfCoins)</em>, recursively gives us all ways of counting changes with given list and subtracts the amount with value of coin we just used.</p><p>You may ask yourself: what about first attend? We don’t subtract anything from <em>amount</em> but the algorithm will give us 1 (which means: we computed another change) only if <em>amount</em> is 0.</p><blockquote><strong>Think about first attend as a possibility to perform algorithm on tree, where root has the same amount but kindOfCoins (list of coins) is smaller.</strong></blockquote><p>It may sounds a little tricky but here I come with visual help. I will draw the course of algorithm for example from Coursera’s example: we’ve got 4$ and infinite number of coins [1$, 2$]:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uwqZdRN5GQVH6n2wR6W0rg.png" /></figure><p>So the answer is 3. If you understood all correctly, there’s nothing left to do — just rewrite code given above that it will take two parameters: amount and list of coins.</p><p>PS. I’m not connected with Coursera in any way — I just love this course and I wanted to share some knowledge with you.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=df8864f68e76" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>